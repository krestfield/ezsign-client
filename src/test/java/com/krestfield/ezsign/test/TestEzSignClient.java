package com.krestfield.ezsign.test;

import com.krestfield.ezsign.*;
import com.krestfield.ezsign.msg.KBase64;

import java.io.ByteArrayInputStream;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.util.Base64;

/**
 * TestEzSignClient
 *
 * Copyright Krestfield 2016
 */
public class TestEzSignClient
{
    public static void main(String args[])
    {
        testClientTLS();
        //testOnlineSignVerify();
        //testRawSignVerify();
        //testEncryption();
        //testGenerateRandom();
    }

    public static void testGenerateRandom()
    {
        try
        {
            EzSignClient client = new EzSignClient("127.0.0.1", 5656, "password");
            byte[] b = client.generateRandomBytes("TEST", 10);
            System.out.println("Generated bytes OK");
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }

    public static void testOnlineSignVerify()
    {
        try
        {
            // To use TLS
            //EzSignClient client = new EzSignClient("demo.krestfield.com", 80).useTls();

            // No TLS but Auth Code
            EzSignClient client = new EzSignClient("demoapi.krestfield.com", 80, "password");

            byte[] signature = client.signData("P7_RSA_SIGN_CHANNEL", "data".getBytes(), false);
            System.out.println("Generated signature OK");
            client.verifySignature("P7_RSA_SIGN_CHANNEL", signature, "data".getBytes(), false);
            System.out.println("Verified signature OK");
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }

    public static void testClientTLS()
    {
        try
        {
            System.out.println("testClientTLS");
            // To use TLS
            String keystoreFilename = "C:\\EzSignV4.2.3\\EzSignServer\\keystores\\127.0.0.1.p12";
            //String keystoreFilename = "C:\\EzSignV4.2.3\\EzSignServer\\keystores\\127.0.0.1.jks";
            String keystorePassword = "password";
            EzSignClient client = new EzSignClient("127.0.0.1", 5656).useTls().useClientTls(keystoreFilename, keystorePassword, "PKCS12");
            //EzSignClient client = new EzSignClient("127.0.0.1", 5656).useTls(); // WORKING
            //EzSignClient client = new EzSignClient("127.0.0.1", 5656);

            // No TLS but Auth Code
            //EzSignClient client = new EzSignClient("demoapi.krestfield.com", 80, "password");

            byte[] signature = client.signData("SOFT", "data".getBytes(), false);
            System.out.println("Generated signature OK");
            client.verifySignature("SOFT", signature, "data".getBytes(), false);
            System.out.println("Verified signature OK");
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }

    public static void testRawSignVerify()
    {
        String channel = "EDGEPKI";
        String signerCertB64 = "MIIDhDCCAmygAwIBAgIRAIA/XkBr7LT2j9h9MY1Bi08wDQYJKoZIhvcNAQELBQAwWjELMAkGA1UEBhMCR0IxGTAXBgNVBAoTEEJhbmsgMiBTSEEyIDQwOTYxETAPBgNVBAsTCFR5cGUgSUlJMR0wGwYDVQQDExRJc3N1aW5nIENBIFNIQTIgNDA5NjAeFw0xNzA2MjIxMjI2MTZaFw00MDEyMDExNDE5MTZaME0xCzAJBgNVBAYTAkdCMRcwFQYDVQQKEw5GYXN0IENoZXF1ZSBUVDEQMA4GA1UECxMHVHlwZSBJSTETMBEGA1UEAxMKQkFOSzAwMjAwMjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAK3mWlrPnDXYlKzQs/SkabGT5BeRpuxYq66wrHoR2DESty3A5ulGbf2tS3pXOeILmpyOsFsSBFpPBCgJPJJ2GwOJX2DUqfgBe+Kb/9GUQh+SgSK5JnvANr8WqmIgy+h9jpOePRDAgKq6/1EYUP0Ujysw/Dx6mongNHur1hRjxrS54FEdJ+uqLEC5ngrp5vp/UWpGUhrMq2WG5AFe+sI3AMcIDpyRSxJjbrLNEgazZmnHtQdMCyzKRIkq8HfP1b22BTx1b+dzcZRZ+17GBbKZfhk92h8KIk17woawtTFcsoYOjo0dksZYtm6yVZXYWro2linIZg+X0kK4LEEp+BdSAkUCAwEAAaNSMFAwHwYDVR0jBBgwFoAUKKwORTTDCljDjoxTti9y65we2icwDgYDVR0PAQH/BAQDAgbAMB0GA1UdDgQWBBTNznr1MGPddrN/SXZgggbPIoBYtTANBgkqhkiG9w0BAQsFAAOCAQEASjWDhjkcbWKBX5BuMc2rw/e8hvzvAMQlormk7QR8otMGHpeXGjiv/C/IALyfmIV6+56orFmQXtS52bnoC5VD1Qz4ugOCLHWPaTEsT6BQKthkVtpMToNgBoKe/3s1+qWrmiwgTd0JKoU5+kC5RZpYg0x6Ow5wqk8x+VVzOf/h4Nf6fQ5Sh5Q7p8YZ80jB41ryWCyMidq5TD0NrMET4fz0fUAA8VOMerRW7ynHo+3/arLv1XwASnykNsPCs74NmdDofNV0BsvmQSuEhfsXWu+jxkXIQyl2aAhIsb+c0qCPEb56W2bsHhurQkmXvfOIj6vwdNNY8YNuRSDZSTmWnppz0A==";
        String intCertB64 = "MIIE3DCCAsSgAwIBAgIRAPdMBQJgrhvB3afm8w0HoygwDQYJKoZIhvcNAQELBQAwVDELMAkGA1UEBhMCR0IxGjAYBgNVBAoTEVR5cGUgSUkgU0hBMiA0MDk2MRAwDgYDVQQLEwdUeXBlIElJMRcwFQYDVQQDEw5Sb290IFNIQTIgNDA5NjAeFw0xNTEyMDMxMzQzNThaFw00MDEyMDIxMzE4NThaMFoxCzAJBgNVBAYTAkdCMRkwFwYDVQQKExBCYW5rIDIgU0hBMiA0MDk2MREwDwYDVQQLEwhUeXBlIElJSTEdMBsGA1UEAxMUSXNzdWluZyBDQSBTSEEyIDQwOTYwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDsLSzLJBGepfIc0GuurNuoWEFkYD4Kcdjkg4/ehI45Xi6UZMt7ZH11uLi5O6ePnHoyQxmuIVqszeH2TI1Bz4meuZPcrlMa5piURtWX6JyKt9SVTBw+fsAGRLB5v3TMxtpxYcbfs6PhQRnQ+ElFeafLcVdow5qTbvNBE3n5nNF7c0zwfMMUlX3S4Q4PI41LedDoqJy1tpY2niu2bbJJ9p7rrjjMPwGd3Mhchu3QwTshuGMNMpUBuAqgkI7JLIzN01RuyCIAp5OQqOgHu78BKhRaV+q8YIwkMUpI2RBcXAftRCGBMyhkVnshTefa4kPz5vFRDtpk2s0dnWG8rj1R0J5ZAgMBAAGjgaIwgZ8wPAYIKwYBBQUHAQEEMDAuMCwGCCsGAQUFBzABhiBodHRwOi8vdnNwcjQ1OS5vZmZpY2UubG9jYWw6ODA4MDAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUKKwORTTDCljDjoxTti9y65we2icwHwYDVR0jBBgwFoAUiH1FWYMHp1Edaotd74AmcXNLHOcwDQYJKoZIhvcNAQELBQADggIBAHbRNsKBFGm1G/JI12AL1cuysuF/Il33Fpq6e7FnwmJuA7WIwvKgA+dAJnNbug31T0zamfKe99Ozy+6eGOwdmkin2UGfThatANMN0T7NNlNsmCIeDqtwwnORkgRd7yCmaqNVK0pzolaXVqQUZ8sA6+abJHqrPIzmXBoou/4kHwoJHDLeTnN12LL0fpw8q3GkuRcNCUmZUZjQ5BsInGJPwtDWYNatZgLGGeINo7N0ofkF6OMCVTszD0pNVusUEe8DDOit8YgDzbcb/YsRpyTiUtxxyqbxNJhQjAdDl2YnlN0mm02wOsAgmgaumA1XQfSdpnhH7nWm8pQJDoBpsYjwjmNzuijqFmpTDy3CjMsG5qKa7W+xqzTTdFP/CajqrN5Bbh+2W9x2pU4yufjz7BrYDDKlj3dL3KeqlBxS0pYlGd7lCu7OP/ov3UzVRKnWlAZnxxpHbdSn3nTgmJ6JRZkMH3WKq/HEEamxoPYIu2szdjah7ylFesgjQznovo5M97uP9DASK+3Oi6npJjELOJFRccelpxEazBHcM2rkIxydYwPPFnFPy6tVwk50WG238dsrhePOnYeaGPi5z0USgJT3KZWPHldTFdgRaoTBNggIhWu2lpWRSHTQ/tMT4+py0WQGOqBgdVnTmy8ddTDjiv12nntrHYFBeYxwyMv8PtpU5Bll";

        X509Certificate signerCert = null;
        X509Certificate[] otherCerts = new X509Certificate[1];
        try {
            CertificateFactory certFactory = CertificateFactory.getInstance("X.509");
            byte[] signerCertData = Base64.getDecoder().decode(signerCertB64);

            ByteArrayInputStream bis = new ByteArrayInputStream(signerCertData);
            signerCert = (X509Certificate)certFactory.generateCertificate(bis);

            byte[] intCertData = Base64.getDecoder().decode(intCertB64);
            bis = new ByteArrayInputStream(intCertData);
            otherCerts[0] = (X509Certificate)certFactory.generateCertificate(bis);

        } catch (CertificateException e) {
            e.printStackTrace();
        }

        try
        {
            EzSignClient client = new EzSignClient("127.0.0.1", 5656, "authCodePassword");

        //byte[] dataToSign = "Hello".getBytes();

            byte[] randBytes = client.generateRandomBytes(channel, 20);

            byte[] rawSignature = client.signData(channel, randBytes, false);
            System.out.println("Returned Signature: " + KBase64.ToBase64String(rawSignature));

            client.verifyRawSignature(channel, rawSignature, randBytes, false, signerCert, otherCerts);
            System.out.println("Verified Signature OK");
        }
        catch (KEzSignConnectException connEx)
        {
            System.out.println("There was an error: " + connEx.getMessage());
        }
        catch (KEzSignException ex)
        {
            System.out.println("There was an error: " + ex.getMessage());
        }
        catch (KSigningException sigEx)
        {
            System.out.println("There was an error signing the data: " + sigEx.getMessage());
        }
        catch (KVerificationException veriEx)
        {
            System.out.println("There was an error verifying the signature: " + veriEx.getMessage());
        }
        catch (KRevocationException revEx)
        {
            System.out.println("There was a revocation exception : " + revEx.getMessage());
        }
        catch (KPathException pathEx)
        {
            System.out.println("There was a path building exception : " + pathEx.getMessage());
        }
    }

    public static void testPerformance()
    {
        EzSignClient client = new EzSignClient("127.0.0.1", 5656);

        long startTime = System.nanoTime();
        for (int i = 0; i < 150*60; i++)
        {
            //System.out.println(i);
            byte[] dataToSign = "Hello".getBytes();
            try
            {
                long sigStartTime = System.nanoTime();
                //byte[] randBytes = client.generateRandomBytes("COOP", 20);

                byte[] signature = client.signData("COOP", dataToSign, false);
                //signature = client.signData("PKCS11_2", dataToSign, false);
                long sigEndTime = System.nanoTime();
                long sigDuration = (sigEndTime - sigStartTime);
                System.out.println("Signing Took: " + sigDuration/1000000 + " milli seconds");

                System.out.println("Returned Signature: " + KBase64.ToBase64String(signature));
                long veriStartTime = System.nanoTime();
                client.verifySignature("PKCS11", signature, dataToSign, false, true, false);
                long veriEndTime = System.nanoTime();
                long veriDuration = (veriEndTime - veriStartTime);
                System.out.println("Verification Took : " + veriDuration/1000000 + " milli seconds");
                System.out.println("Verified Signature OK");
                //client.verifySignature("VERISIGN", signature, dataToSign, false);

                System.out.println("Returned signature: " + KBase64.ToBase64String(signature));
            }
            catch (KEzSignConnectException connEx)
            {
                System.out.println("There was an error: " + connEx.getMessage());
            }
            catch (KEzSignException ex)
            {
                System.out.println("There was an error: " + ex.getMessage());
            }
            catch (KSigningException sigEx)
            {
                System.out.println("There was an error signing the data: " + sigEx.getMessage());
            }
            catch (KVerificationException veriEx)
            {
                System.out.println("There was an error verifying the signature: " + veriEx.getMessage());
            }
            catch (KRevocationException revEx)
            {
                System.out.println("There was a revocation exception : " + revEx.getMessage());
            }
            catch (KPathException pathEx)
            {
                System.out.println("There was a path building exception : " + pathEx.getMessage());
            }
        }
        long endTime = System.nanoTime();

        long duration = (endTime - startTime);
        System.out.println("Time Taken: " + duration/1000000 + " milli seconds");
    }

    public static void testEncryption()
    {
        EzSignClient client = new EzSignClient("127.0.0.1", 5656);
        try
        {
            byte[] encryptedData = client.encryptData("SYM", "hello".getBytes(), "testkey5");
            System.out.println("Enc Data: " + KBase64.ToBase64String(encryptedData));
            encryptedData[25] = 0x01;
            byte[] clearData = client.decryptData("SYM", encryptedData, "testkey5");
            System.out.println("Clear Data: " + new String(clearData));
        }
        catch (KEzSignException ezEx)
        {
            System.out.println(ezEx.getMessage());
        }
        catch (KEncipherException cex)
        {
            System.out.println(cex.getMessage());
        }
        catch (KEzSignConnectException connEx)
        {
            System.out.println("There was an error: " + connEx.getMessage());
        }
    }
}
